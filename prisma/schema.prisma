generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  name                   String
  image                  String?
  isSubscribed           Boolean                 @default(false)
  customerId             String?                 @unique // stripe customer id
  bio                    String?
  posts                  Post[]
  subscription           Subscription?
  orders                 Order[]
  comments               Comment[]
  likes                  Like[]
  messages               Message[]
  chatRooms              ChatRoom[]
  isAI                   Boolean                 @default(false)
  likedPosts             Post[]                  @relation("LikedPosts")
  conversations          Conversation[]
  customizations         AIModelCustomization[]
  payments               Payment[]
  interactionLogs        InteractionLog[]
  notifications          Notification[]
  activityFeeds          ActivityFeed[]
  moderationFlags        ModerationFlag[]
  engagements            Engagement[]
  conversationEmbeddings ConversationEmbedding[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  AIModel          AIModel[]
  followedAIModels Follow[]
}

model Follow {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id])
  aiModelId String
  createdAt DateTime @default(now())

  @@unique([userId, aiModelId])
}

model Post {
  id        String  @id @default(cuid())
  mediaUrl  String?
  mediaType String?
  text      String
  userId    String
  likes     Int     @default(0)
  isPublic  Boolean @default(false)
  likedBy   User[]  @relation("LikedPosts")
  authorId  String
  author    User    @relation(fields: [authorId], references: [id])

  comments  Comment[]
  likesList Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id     String @id @default(cuid())
  text   String
  userId String
  postId String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  planId    String
  price     Int      @default(0)
  startDate DateTime @default(now())
  endDate   DateTime
  aiModelId String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Product {
  id         String  @id @default(cuid())
  name       String
  image      String
  price      Int
  isArchived Boolean @default(false)

  orders Order[]
}

model Order {
  id                String   @id @default(cuid())
  userId            String
  productId         String
  price             Int
  isPaid            Boolean  @default(false)
  size              String
  orderDate         DateTime @default(now())
  shippingAddressId String?
  paymentId         String?

  user            User             @relation(fields: [userId], references: [id])
  product         Product          @relation(fields: [productId], references: [id])
  shippingAddress ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  Payment         Payment[]

  @@index([userId])
  @@index([productId])
}

model ShippingAddress {
  id         String  @id @default(cuid())
  address    String
  city       String
  state      String?
  postalCode String
  country    String

  order Order[]
}

model Message {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId  String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  aiModel     AIModel? @relation(fields: [aiModelId], references: [id])
  aiModelId   String?
  isAIMessage Boolean  @default(false) // New field
}

model ChatRoom {
  id        String    @id @default(cuid())
  name      String
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  aiModel   AIModel?  @relation(fields: [aiModelId], references: [id])
  aiModelId String?
}

model AIModel {
  id                    String                  @id @default(cuid())
  name                  String
  personality           String
  appearance            String
  backstory             String
  hobbies               String
  likes                 String
  dislikes              String
  imageUrl              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             User                    @relation(fields: [userId], references: [id])
  userId                String
  aiContent             aIContent[]
  messages              Message[]
  chatRooms             ChatRoom[]
  customizations        AIModelCustomization[]
  interactionLogs       InteractionLog[]
  engagements           Engagement[]
  ConversationEmbedding ConversationEmbedding[]

  followers     Follow[]
  followerCount Int      @default(0)

  @@index([userId])
}

model aIContent {
  id        String   @id @default(cuid())
  content   String
  aiModelId String
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  content   String
  // embedding String   // Optional: Store the embedding vector here if needed
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model AIModelCustomization {
  id              String @id @default(cuid())
  userId          String
  aiModelId       String
  preferenceKey   String
  preferenceValue String

  aiModel AIModel @relation(fields: [aiModelId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([aiModelId])
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  orderId     String?
  amount      Int
  currency    String
  status      String   @default("pending")
  paymentDate DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@index([userId])
  @@index([orderId])
}

model InteractionLog {
  id          String   @id @default(cuid())
  userId      String
  aiModelId   String
  interaction String
  timestamp   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  aiModel AIModel @relation(fields: [aiModelId], references: [id])

  @@index([userId])
  @@index([aiModelId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ActivityFeed {
  id        String   @id @default(cuid())
  userId    String
  activity  String
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ModerationFlag {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  reason    String
  status    String   @default("pending")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([contentId])
}

model Engagement {
  id        String   @id @default(cuid())
  userId    String
  aiModelId String
  eventType String
  timestamp DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  aiModel AIModel @relation(fields: [aiModelId], references: [id])

  @@index([userId])
  @@index([aiModelId])
}

model ConversationEmbedding {
  id        String   @id @default(cuid())
  userId    String
  aiModelId String
  embedding String // Store the embedding vector as a string
  content   String
  timestamp DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  aiModel AIModel @relation(fields: [aiModelId], references: [id])

  @@index([userId, aiModelId])
}
