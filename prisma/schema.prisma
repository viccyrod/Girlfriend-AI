generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  name                   String
  image                  String?
  isSubscribed           Boolean                 @default(false)
  customerId             String?                 @unique
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  isAI                   Boolean                 @default(false)
  bio                    String?
  messageCount           Int                     @default(0)
  imageCount             Int                     @default(0)
  AIModel                AIModel[]
  customizations         AIModelCustomization[]
  activityFeeds          ActivityFeed[]
  comments               Comment[]
  conversations          Conversation[]
  conversationEmbeddings ConversationEmbedding[]
  engagements            Engagement[]
  followedAIModels       Follow[]
  interactionLogs        InteractionLog[]
  likes                  Like[]
  messages               Message[]
  moderationFlags        ModerationFlag[]
  notifications          Notification[]
  orders                 Order[]
  payments               Payment[]
  posts                  Post[]
  subscription           Subscription?
  chatRooms              ChatRoom[]              @relation("ChatRoomToUser")
  createdChatRooms       ChatRoom[]              @relation("ChatRoomCreator")
  likedPosts             Post[]                  @relation("LikedPosts")
}

model Follow {
  id        String   @id @default(cuid())
  aiModelId String
  userId    String
  createdAt DateTime @default(now())
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, aiModelId])
}

model Post {
  id        String    @id @default(cuid())
  mediaUrl  String?
  mediaType String?
  text      String
  userId    String
  likes     Int       @default(0)
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  comments  Comment[]
  likesList Like[]
  author    User      @relation(fields: [authorId], references: [id])
  likedBy   User[]    @relation("LikedPosts")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([postId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  planId    String
  price     Int      @default(0)
  startDate DateTime @default(now())
  endDate   DateTime
  aiModelId String?
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Product {
  id         String  @id @default(cuid())
  name       String
  image      String
  price      Int
  isArchived Boolean @default(false)
  orders     Order[]
}

model Order {
  id                String           @id @default(cuid())
  userId            String
  productId         String
  price             Int
  isPaid            Boolean          @default(false)
  size              String
  orderDate         DateTime         @default(now())
  shippingAddressId String?
  paymentId         String?
  product           Product          @relation(fields: [productId], references: [id])
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  Payment           Payment[]

  @@index([userId])
  @@index([productId])
}

model ShippingAddress {
  id         String  @id @default(cuid())
  address    String
  city       String
  state      String?
  postalCode String
  country    String
  order      Order[]
}

model Message {
  id          String   @id @default(cuid())
  content     String
  userId      String?
  chatRoomId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  aiModelId   String?
  isAIMessage Boolean  @default(false)
  metadata    Json?
  role        String   @default("user")
  aiModel     AIModel? @relation(fields: [aiModelId], references: [id])
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@index([chatRoomId])
  @@index([userId])
}

model ChatRoom {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aiModelId   String?
  aiModel     AIModel?  @relation(fields: [aiModelId], references: [id])
  messages    Message[]
  users       User[]    @relation("ChatRoomToUser")
  createdBy   User?     @relation("ChatRoomCreator", fields: [createdById], references: [id])
  createdById String?

  @@index([createdById])
}

model AIModel {
  id                    String                  @id @default(cuid())
  name                  String
  personality           String
  appearance            String
  backstory             String
  hobbies               String
  likes                 String
  dislikes              String
  age                   Int?
  imageUrl              String
  voiceId               String? // ElevenLabs voice ID
  images                Image[]
  messageCount          Int                     @default(0)
  imageCount            Int                     @default(0)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                String
  followerCount         Int                     @default(0)
  isPrivate             Boolean                 @default(false)
  isAnime               Boolean                 @default(false)
  isHumanX              Boolean                 @default(false)
  status                String                  @default("COMPLETE")
  createdBy             User?                   @relation(fields: [userId], references: [id])
  customizations        AIModelCustomization[]
  chatRooms             ChatRoom[]
  ConversationEmbedding ConversationEmbedding[]
  engagements           Engagement[]
  followers             Follow[]
  interactionLogs       InteractionLog[]
  messages              Message[]
  aiContent             aIContent[]

  @@index([userId])
}

model aIContent {
  id        String   @id @default(cuid())
  content   String
  aiModelId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id])
}

model Image {
  id        String   @id @default(cuid())
  imageData String? // Base64 image data
  imageUrl  String? // URL reference
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
  aiModelId String
  isNSFW    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([aiModelId])
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  content   String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model AIModelCustomization {
  id              String   @id @default(cuid())
  userId          String
  aiModelId       String
  preferenceKey   String
  preferenceValue String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  aiModel         AIModel  @relation(fields: [aiModelId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([aiModelId])
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  orderId     String?
  amount      Int
  currency    String
  status      String   @default("pending")
  paymentDate DateTime @default(now())
  order       Order?   @relation(fields: [orderId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orderId])
}

model InteractionLog {
  id          String   @id @default(cuid())
  userId      String
  aiModelId   String
  interaction String
  timestamp   DateTime @default(now())
  aiModel     AIModel  @relation(fields: [aiModelId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([aiModelId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ActivityFeed {
  id        String   @id @default(cuid())
  userId    String
  activity  String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ModerationFlag {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  reason    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([contentId])
}

model Engagement {
  id        String   @id @default(cuid())
  userId    String
  aiModelId String
  eventType String
  timestamp DateTime @default(now())
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([aiModelId])
}

model ConversationEmbedding {
  id        String   @id @default(cuid())
  userId    String
  aiModelId String
  embedding String
  content   String
  timestamp DateTime @default(now())
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, aiModelId])
}

model ModelTraining {
  id                  String   @id @default(cuid())
  userId              String
  modelName           String
  replicateTrainingId String
  status              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
